plugins {
    id 'java-gradle-plugin'
    id 'java-project'
    id 'kotlin-project'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.14.0'
}

sourceSets {
    functionalTest
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':http-spec-runner')
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.3'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.12.3'
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

task functionalTest(type: Test, group: 'verification') {
    classpath = sourceSets.functionalTest.runtimeClasspath
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
}

task writeVersion(group: 'build', description: 'writes version information to resource') {
    File versionFile = file("$buildDir/resources/main/plugin-version.txt")
    doLast {
        if (!versionFile.parentFile.exists()) {
            versionFile.parentFile.mkdirs()
        }
        versionFile.write("${project.version}", 'UTF-8')
    }
}

tasks.named('jar').configure {
    dependsOn 'writeVersion'
}

gradlePlugin {
    def p = project
    plugins {
        httpSpecRunnerPlugin {
            id = 'org.mikeneck.http-spec-runner-gradle-plugin'
            displayName = 'http spec runner plugin'
            description = p.file('description.txt').text
            implementationClass = 'org.mikeneck.httpspec.HttpSpecRunnerPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/mike-neck/http-spec-runner'
    vcsUrl = 'https://github.com/mike-neck/http-spec-runner'
    tags = ['http', 'testing', 'REST API']
}
